// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// This is used to run the seed script
// npx prisma db seed
generator seeder {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?
  location      String?
  role          String    @default("user") // user, admin
  followerCount Int       @default(0)
  followingCount Int      @default(0)
  postCount     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  commentLikes  CommentLike[]
  followedBy    Follow[]  @relation("Following")
  following     Follow[]  @relation("Follower")
  categories    Category[]
}

// Post model
model Post {
  id            String    @id @default(cuid())
  title         String
  content       String
  excerpt       String?
  status        String    @default("draft") // draft, published
  featuredImage String?
  readingTime   Int       @default(1) // Reading time in minutes
  likeCount     Int       @default(0)
  commentCount  Int       @default(0)
  viewCount     Int       @default(0)
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  comments      Comment[]
  likes         Like[]
  categories    PostCategory[]
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isDefault   Boolean   @default(false)
  postCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  posts       PostCategory[]
}

// PostCategory model (for many-to-many relationship)
model PostCategory {
  id         String   @id @default(cuid())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@unique([postId, categoryId])
}

// Comment model
model Comment {
  id        String    @id @default(cuid())
  content   String
  likeCount Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  parentId  String?
  replies   Comment[] @relation("CommentToComment")
  likes     CommentLike[]
}

// Like model
model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([postId, userId])
}

// Follow model
model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  // Relations
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@unique([followerId, followingId])
}

// CommentLike model
model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([userId, commentId])
}
